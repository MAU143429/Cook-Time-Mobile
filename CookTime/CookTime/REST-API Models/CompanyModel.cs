
namespace CookTime.REST_API_CompanyModel
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Newtonsoft.Json.Linq;
    /// <summary>
    /// Creates a class that packs company objects into an array
    /// author Jose Antonio Espinoza.
    /// </summary>
    public partial class CompanyModel
    {
        [JsonProperty("companies")]
        public Company[] Companies { get; set; }
    }

    /// <summary>
    /// Class for creating Company objects from json files
    /// author Jose Antonio Espinoza.
    /// </summary>
    public partial class Company
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("number")]
        public int Number { get; set; }

        [JsonProperty("schedule")]
        public string Schedule { get; set; }

        [JsonProperty("logo")]
        public string Logo { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("posts")]
        public int Posts { get; set; }

        [JsonProperty("followers")]
        public JArray Followers { get; set; }

        [JsonProperty("following")]
        public JArray Following { get; set; }

        [JsonProperty("members")]
        public JArray Members { get; set; }

        [JsonProperty("recipe")]
        public JArray Recipes { get; set; }
    }

    public partial class Company
    {
        /// <summary>
        /// Methods that converts a json file to an object type
        /// author Jose Antonio Espinoza.
        /// </summary>
        public static Company FromJson(string json) => JsonConvert.DeserializeObject<Company>(json, CookTime.REST_API_CompanyModel.Converter.Settings);
    }

    public static class Serialize
    {
        /// <summary>
        /// Methods that converts an object type to a json file.
        /// author Jose Antonio Espinoza.
        /// </summary>
        public static string ToJson(this CompanyModel self) => JsonConvert.SerializeObject(self, CookTime.REST_API_CompanyModel.Converter.Settings);
    }
    /// <summary>
    /// Methods autogenerated by Newtonsoft.json
    /// author Jose Antonio Espinoza.
    /// </summary>
    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
        {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }
        /// <summary>
        /// Creates singleton instance of the string parser.
        /// author Jose Antonio Espinoza.
        /// </summary>
        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}


